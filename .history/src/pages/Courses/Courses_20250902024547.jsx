import React, { useState } from "react";
import { FaStar } from "react-icons/fa";

const courses = [
  {
    id: 1,
    title: "‡¶á‡¶®‡ßã‡¶≠‡ßá‡¶ü‡¶ø‡¶≠ ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™ ‡ßß",
    description:
      "‡¶è‡¶á ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∂‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶®‡ßã‡¶≠‡ßá‡¶ü‡¶ø‡¶≠ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§",
    badge: "Live Coming Soon",
    image: "https://source.unsplash.com/400x250/?technology,innovation",
    mcq: [
      {
        question: "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶™‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü?",
        options: ["Planning", "Coding", "Testing", "Deployment"],
        answer: "Planning",
      },
      {
        question: "‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®?",
        options: ["Research", "Random Guess", "Skipping Steps", "Ignore Errors"],
        answer: "Research",
      },
    ],
  },
  {
    id: 2,
    title: "‡¶á‡¶®‡ßã‡¶≠‡ßá‡¶ü‡¶ø‡¶≠ ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™ ‡ß®",
    description:
      "‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø‡ßü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§",
    badge: "Live Coming Soon",
    image: "https://source.unsplash.com/400x250/?science,lab",
    mcq: [
      {
        question: "‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶á‡¶°‡¶ø‡ßü‡¶æ ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ï‡ßá‡¶® ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£?",
        options: ["Collaboration", "Competition", "Secrecy", "Delay"],
        answer: "Collaboration",
      },
      {
        question: "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Ç ‡¶ï‡¶§‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£?",
        options: ["Very Important", "Not Important", "Optional", "Never Needed"],
        answer: "Very Important",
      },
    ],
  },
  {
    id: 3,
    title: "‡¶á‡¶®‡ßã‡¶≠‡ßá‡¶ü‡¶ø‡¶≠ ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™ ‡ß©",
    description:
      "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ì ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶æ‡ßü‡¶® ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶ó‡¶æ‡¶á‡¶°‡¶≤‡¶æ‡¶á‡¶®‡•§",
    badge: "Live Coming Soon",
    image: "https://source.unsplash.com/400x250/?innovation,startup",
    mcq: [
      {
        question: "Testing ‡¶∏‡ßç‡¶ü‡ßá‡¶™‡¶ü‡¶ø ‡¶ï‡¶ñ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§?",
        options: ["After Coding", "Before Planning", "Skip It", "Deployment ‡¶Ü‡¶ó‡ßá"],
        answer: "After Coding",
      },
      {
        question: "‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶ï‡ßá‡¶® ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£?",
        options: ["Tracking Progress", "Ignore Steps", "For Fun", "Waste Time"],
        answer: "Tracking Progress",
      },
    ],
  },
];

const Courses = () => {
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [showResults, setShowResults] = useState(false);

  const startQuiz = (course) => {
    setSelectedCourse(course);
    setCurrentQuestionIndex(0);
    setScore(0);
    setShowResults(false);
  };

  const handleAnswer = (option) => {
    if (option === selectedCourse.mcq[currentQuestionIndex].answer) {
      setScore(score + 1);
    }

    if (currentQuestionIndex + 1 < selectedCourse.mcq.length) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      setShowResults(true);
    }
  };

  const resetQuiz = () => {
    setSelectedCourse(null);
    setCurrentQuestionIndex(0);
    setScore(0);
    setShowResults(false);
  };

  return (
    <section className="max-w-7xl mx-auto px-4 py-10">
      <h2 className="text-3xl font-bold text-center mb-10">
        üöÄ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π
      </h2>

      {!selectedCourse ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {courses.map((course) => (
            <div
              key={course.id}
              className="bg-white rounded-xl shadow-lg overflow-hidden transform transition duration-500 hover:scale-105 hover:shadow-2xl"
            >
              <div className="relative">
                <img
                  src={course.image}
                  alt={course.title}
                  className="w-full h-48 object-cover"
                />
                <span className="absolute top-3 left-3 bg-red-500 text-white text-xs font-bold px-3 py-1 rounded-full animate-pulse">
                  {course.badge}
                </span>
              </div>

              <div className="p-5">
                <h3 className="text-xl font-semibold mb-2">{course.title}</h3>
                <p className="text-gray-600 mb-4">{course.description}</p>
                <div className="flex items-center gap-1 mb-3">
                  <FaStar className="text-yellow-400" />
                  <FaStar className="text-yellow-400" />
                  <FaStar className="text-yellow-400" />
                  <FaStar className="text-yellow-400" />
                  <FaStar className="text-gray-300" />
                  <span className="ml-2 text-sm text-gray-500">4.0 Rating</span>
                </div>
                <button
                  onClick={() => startQuiz(course)}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md"
                >
                  Start Quiz
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="max-w-xl mx-auto bg-white p-6 rounded-lg shadow">
          {!showResults ? (
            <>
              <h3 className="text-xl font-semibold mb-4">
                {selectedCourse.mcq[currentQuestionIndex].question}
              </h3>
              <div className="flex flex-col gap-3">
                {selectedCourse.mcq[currentQuestionIndex].options.map((opt, i) => (
                  <button
                    key={i}
                    onClick={() => handleAnswer(opt)}
                    className="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-md text-left"
                  >
                    {opt}
                  </button>
                ))}
              </div>
            </>
          ) : (
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Quiz Completed!</h3>
              <p className="text-lg mb-4">
                Score: {score} / {selectedCourse.mcq.length}
              </p>
              <button
                onClick={resetQuiz}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md"
              >
                Back to Courses
              </button>
            </div>
          )}
        </div>
      )}
    </section>
  );
};

export default Courses;
