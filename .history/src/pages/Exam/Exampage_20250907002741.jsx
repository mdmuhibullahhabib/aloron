import React, { useState } from "react";
import Dropdowns from "./Dropdowns"; // Import your dropdown component

const Exampage = () => {
  const [started, setStarted] = useState(false);
  const [finished, setFinished] = useState(false);
  const [time, setTime] = useState(12);
  const [questions, setQuestions] = useState(20);
  const [currentQ, setCurrentQ] = useState(1);
  const [score, setScore] = useState(0);
  const [selected, setSelected] = useState({
    group: "",
    subject: "",
    chapter: "",
  });
  const [questions, refetch]

  // Dummy Questions
  const questionSet = [
    {
      id: 1,
      q: "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж░рж╛ржЬржзрж╛ржирзА ржХрзЛржерж╛рзЯ?",
      options: ["ржврж╛ржХрж╛", "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", "ржЦрзБрж▓ржирж╛", "рж╕рж┐рж▓рзЗржЯ"],
      correct: "ржврж╛ржХрж╛",
    },
    {
      id: 2,
      q: "SSC ржПрж░ ржкрзВрж░рзНржгрж░рзВржк ржХрзА?",
      options: [
        "Secondary School Certificate",
        "School Standard Certificate",
        "Super School Course",
        "None",
      ],
      correct: "Secondary School Certificate",
    },
    {
      id: 3,
      q: "ржЬрж╛рждрзАрзЯ ржХржмрж┐ ржХрзЗ?",
      options: [
        "рж░ржмрзАржирзНржжрзНрж░ржирж╛рже ржарж╛ржХрзБрж░",
        "ржХрж╛ржЬрзА ржиржЬрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо",
        "ржЬрж╕рзАржо ржЙржжрзНржжрж┐ржи",
        "рж╕рзЗрж▓рж┐ржо ржЖрж▓ ржжрзАржи",
      ],
      correct: "ржХрж╛ржЬрзА ржиржЬрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо",
    },
  ];

  const handleAnswer = (ans) => {
    if (ans === questionSet[currentQ - 1].correct) {
      setScore(score + 1);
    }
    if (currentQ < questionSet.length) {
      setCurrentQ(currentQ + 1);
    } else {
      setFinished(true);
    }
  };

  if (finished) {
    return (
      <div className="max-w-2xl mx-auto p-6 text-center">
        <h2 className="text-2xl font-bold mb-4">ЁЯУК Exam Performance</h2>
        <div className="bg-white shadow-lg rounded-lg p-6 border">
          <p className="text-lg">Total Questions: {questionSet.length}</p>
          <p className="text-lg">Correct: {score}</p>
          <p className="text-lg">Wrong: {questionSet.length - score}</p>
          <p className="text-lg font-bold">
            Score: {((score / questionSet.length) * 100).toFixed(2)}%
          </p>
        </div>
        <button
          className="mt-4 bg-blue-500 text-white px-6 py-2 rounded-lg shadow hover:bg-blue-600"
          onClick={() => window.location.reload()}
        >
          ЁЯФД ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ
        </button>
      </div>
    );
  }

  if (started) {
    const q = questionSet[currentQ - 1];
    return (
      <div className="max-w-2xl mx-auto p-6">
        <h2 className="text-xl font-semibold mb-4">
          ржкрзНрж░рж╢рзНржи {currentQ} / {questionSet.length}
        </h2>
        <div className="bg-white shadow-lg rounded-lg p-6 border">
          <p className="text-lg mb-4">{q.q}</p>
          <div className="grid gap-2">
            {q.options.map((op, i) => (
              <button
                key={i}
                className="w-full px-4 py-2 border rounded-lg hover:bg-gray-100 transition"
                onClick={() => handleAnswer(op)}
              >
                {op}
              </button>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto p-6">
      {/* Dropdown Filter Section */}
      <Dropdowns setSelected={setSelected} />

      {/* Instructions */}
      <div className="bg-gray-50 p-4 rounded-lg border mb-6">
        <h3 className="text-red-500 font-bold mb-2">
          ржкрж░рзАржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржкрзНрж░рждрж┐ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ржмрж▓рзАржГ
        </h3>
        <ul className="list-disc pl-5 text-sm space-y-1">
          <li>рждрзЛржорж╛рж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржЕржирзБржпрж╛ржпрж╝рзА ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржг рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЛред</li>
          <li>ржкрзНрж░рждрж┐ржЯрж┐ ржнрзБрж▓ ржЙрждрзНрждрж░рзЗрж░ ржЬржирзНржп ржирзЗржЧрзЗржЯрж┐ржн ржорж╛рж░рзНржХ ржерж╛ржХржмрзЗред</li>
          <li>ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╕ржоржпрж╝ рж╢рзЗрж╖ рж╣рж▓рзЗ ржкрж░рзАржХрзНрж╖рж╛ рж╢рзЗрж╖ рж╣ржмрзЗред</li>
        </ul>
      </div>

      {/* Question & Time Input */}
      <div className="flex items-center gap-4 mb-6">
        <div>
          <label className="block text-sm">ржкрзНрж░рж╢рзНржи рж╕ржВржЦрзНржпрж╛</label>
          <input
            type="number"
            className="w-24 border rounded-lg p-2"
            value={questions}
            onChange={(e) => setQuestions(Number(e.target.value))}
          />
        </div>
        <div>
          <label className="block text-sm">рж╕ржоржпрж╝ (ржорж┐ржирж┐ржЯ)</label>
          <input
            type="number"
            className="w-24 border rounded-lg p-2"
            value={time}
            onChange={(e) => setTime(Number(e.target.value))}
          />
        </div>
      </div>

      {/* Start Button */}
      <button
        className="w-full bg-green-500 text-white py-2 rounded-lg shadow hover:bg-green-600 disabled:opacity-50"
        disabled={!selected.chapter}
        onClick={() => setStarted(true)}
      >
        рж╢рзБрж░рзБ ржХрж░рж┐
      </button>
    </div>
  );
};

export default Exampage;
